package com.capgemini.payment.wallet.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.capgemini.payment.wallet.exception.InvalidAccountException;
import com.capgemini.payment.wallet.model.WalletAccount;
import com.capgemini.payment.wallet.model.WalletTransaction;
import com.capgemini.payment.wallet.repository.WalletAccountRepository;
import com.capgemini.payment.wallet.repository.WalletTransactionRepository;

@Service
public class WalletTransactionServiceImpl implements WalletTransactionService{
	
	@Autowired 
	WalletTransactionRepository walletTransactionRepository;
	
	@Autowired
	WalletAccountRepository walletAccountRepository;
	
	@Autowired 
	WalletAccountService walletAccountService;
	
	@Override
	public boolean createTransaction(WalletTransaction transaction) {
		boolean flag = false;
		try {
			int recipientAccountId = transaction.getReceiverAccountId();
			double transferAmount = transaction.getAmount();
			if((transaction.getDescription()!="DTH Bill" && transaction.getDescription()!="Electricity Bill")&& !walletAccountRepository.existsById(recipientAccountId)) {
				throw new InvalidAccountException("Invalid Recipient Account...");
			}
			
			if(transaction.getDescription()!="DTH Bill" || transaction.getDescription()!="Electricity Bill") {
			WalletAccount receiverAccount = walletAccountService.getAccountInfo(recipientAccountId);
			double prevBalance = receiverAccount.getAccountBalance();
			double recieverFinalBalance  = prevBalance + transferAmount;
			receiverAccount.setAccountBalance(recieverFinalBalance);
			recieverFinalBalance = walletAccountService.updateBalance(receiverAccount);
			}
			
			int senderAccountId = transaction.getAccountId();
			WalletAccount senderAccount = walletAccountService.getAccountInfo(senderAccountId);
			double senderPrevBalance = senderAccount.getAccountBalance();
			double senderFinalBalance  = senderPrevBalance - transferAmount;
			senderAccount.setAccountBalance(senderFinalBalance);
			senderFinalBalance = walletAccountService.updateBalance(senderAccount);
			walletTransactionRepository.save(transaction);
			flag = true;
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		return flag;
	}

	@Override
	public List<WalletTransaction> getTransactionList(int accountId) {
		List<WalletTransaction> list = new ArrayList<WalletTransaction>();
		try {
			List<WalletTransaction> listAll = walletTransactionRepository.findAll();
			for(WalletTransaction transaction: listAll) {
				if(transaction.getAccountId()==accountId) {
					list.add(transaction);
				}
			}
		}catch(Exception e) {
			e.printStackTrace();
		}
		return list;
	}
}